generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                   Int                  @id @default(autoincrement())
  username             String?              @unique(map: "users_username_unique") @db.VarChar(50)
  email                String               @unique(map: "users_email_unique")
  password             String?              @db.VarChar(255)
  name                 String               @db.VarChar(50)
  phone                String?              @db.VarChar(20)
  status               UserStatus           @default(active)
  email_verified_at    DateTime?            @db.Timestamp(0)
  remember_token       String?              @db.VarChar(100)
  login_type           users_login_type     @default(email)
  avatar_url           String?              @db.VarChar(500)
  last_login_at        DateTime?            @db.Timestamp(0)
  last_login_ip        String?              @db.VarChar(45)
  created_at           DateTime?            @db.Timestamp(0)
  updated_at           DateTime?            @db.Timestamp(0)
  activity_logs        ActivityLog[]
  consultations        Consultation[]
  form_submissions     FormSubmission[]
  posts                Post[]
  refresh_tokens       RefreshToken[]
  satisfaction_surveys SatisfactionSurvey[]
  social_accounts      SocialAccount[]
  sponsors             Sponsor[]
  two_factor_auth      TwoFactorAuth?
  user_devices         UserDevice[]
  user_profiles        UserProfile[]

  @@index([email_verified_at], map: "users_email_verified_index")
  @@index([login_type], map: "users_login_type_index")
  @@index([status], map: "users_status_index")
  @@map("users")
}

model UserProfile {
  id                   Int       @id @default(autoincrement())
  user_id              Int
  church_name          String?   @db.VarChar(100)
  position             String?   @db.VarChar(50)
  denomination         String?   @db.VarChar(50)
  address              String?   @db.VarChar(255)
  postcode             String?   @db.VarChar(10)
  birth_date           DateTime? @db.Date
  gender               Gender?
  profile_image        String?   @db.VarChar(255)
  newsletter_subscribe Boolean   @default(false)
  marketing_agree      Boolean   @default(false)
  privacy_agree_date   DateTime? @db.Timestamp(0)
  terms_agree_date     DateTime? @db.Timestamp(0)
  created_at           DateTime? @db.Timestamp(0)
  updated_at           DateTime? @db.Timestamp(0)
  users                User      @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "user_profiles_user_id_foreign")

  @@index([user_id], map: "user_profiles_user_id_foreign")
  @@map("user_profiles")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model PasswordResetToken {
  email      String
  token      String    @db.VarChar(255)
  created_at DateTime? @db.Timestamp(0)

  @@index([email], map: "password_reset_tokens_email_index")
  @@map("password_reset_tokens")
  @@ignore
}

model Category {
  id               Int          @id @default(autoincrement())
  parent_id        Int?
  name             String       @db.VarChar(100)
  slug             String       @unique(map: "categories_slug_unique") @db.VarChar(100)
  description      String?      @db.Text
  type             CategoryType
  sort_order       Int          @default(0)
  is_active        Boolean      @default(true)
  created_at       DateTime?    @db.Timestamp(0)
  updated_at       DateTime?    @db.Timestamp(0)
  categories       Category?    @relation("categoriesTocategories", fields: [parent_id], references: [id], onUpdate: NoAction, map: "categories_parent_id_foreign")
  other_categories Category[]   @relation("categoriesTocategories")
  posts            Post[]

  @@index([parent_id], map: "categories_parent_id_foreign")
  @@index([type], map: "categories_type_index")
  @@map("categories")
}

model Post {
  id             Int        @id @default(autoincrement())
  category_id    Int
  user_id        Int
  title          String     @db.VarChar(255)
  slug           String?    @db.VarChar(255)
  content        String     @db.LongText
  excerpt        String?    @db.Text
  featured_image String?    @db.VarChar(255)
  status         PostStatus @default(draft)
  is_notice      Boolean    @default(false)
  is_featured    Boolean    @default(false)
  view_count     Int        @default(0)
  published_at   DateTime?  @db.Timestamp(0)
  created_at     DateTime?  @db.Timestamp(0)
  updated_at     DateTime?  @db.Timestamp(0)
  categories     Category   @relation(fields: [category_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "posts_category_id_foreign")
  users          User       @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "posts_user_id_foreign")

  @@index([category_id], map: "posts_category_id_foreign")
  @@index([published_at], map: "posts_published_at_index")
  @@index([slug], map: "posts_slug_index")
  @@index([status], map: "posts_status_index")
  @@index([user_id], map: "posts_user_id_foreign")
  @@index([view_count], map: "posts_view_count_index")
  @@map("posts")
}

model Attachment {
  id                Int       @id @default(autoincrement())
  attachable_type   String    @db.VarChar(100)
  attachable_id     Int
  filename          String    @db.VarChar(255)
  original_filename String    @db.VarChar(255)
  path              String    @db.VarChar(500)
  mime_type         String?   @db.VarChar(100)
  size              BigInt?
  download_count    Int       @default(0)
  created_at        DateTime? @db.Timestamp(0)
  updated_at        DateTime? @db.Timestamp(0)

  @@index([attachable_type, attachable_id], map: "attachments_attachable_type_attachable_id_index")
  @@map("attachments")
}

model MainBanner {
  id          Int                      @id @default(autoincrement())
  title       String                   @db.VarChar(255)
  subtitle    String?                  @db.VarChar(255)
  description String?                  @db.Text
  image_path  String                   @db.VarChar(500)
  link_url    String?                  @db.VarChar(500)
  link_target main_banners_link_target @default(self)
  sort_order  Int                      @default(0)
  is_active   Boolean                  @default(true)
  start_date  DateTime?                @db.DateTime(0)
  end_date    DateTime?                @db.DateTime(0)
  created_at  DateTime?                @db.Timestamp(0)
  updated_at  DateTime?                @db.Timestamp(0)

  @@index([is_active], map: "main_banners_is_active_index")
  @@index([sort_order], map: "main_banners_sort_order_index")
  @@map("main_banners")
}

model QuickLink {
  id          Int       @id @default(autoincrement())
  title       String    @db.VarChar(100)
  icon        String?   @db.VarChar(255)
  link_url    String    @db.VarChar(500)
  description String?   @db.Text
  sort_order  Int       @default(0)
  is_active   Boolean   @default(true)
  created_at  DateTime? @db.Timestamp(0)
  updated_at  DateTime? @db.Timestamp(0)

  @@index([sort_order], map: "quick_links_sort_order_index")
  @@map("quick_links")
}

model Consultation {
  id                 Int                @id @default(autoincrement())
  user_id            Int?
  name               String             @db.VarChar(50)
  phone              String             @db.VarChar(20)
  email              String?
  church_name        String?            @db.VarChar(100)
  position           String?            @db.VarChar(50)
  consultation_type  String             @db.VarChar(50)
  preferred_date     DateTime?          @db.Date
  preferred_time     String?            @db.VarChar(50)
  title              String             @db.VarChar(255)
  content            String             @db.Text
  status             ConsultationStatus @default(pending)
  assigned_to        Int?
  consultation_date  DateTime?          @db.DateTime(0)
  consultation_notes String?            @db.Text
  privacy_agree      Boolean            @default(false)
  created_at         DateTime?          @db.Timestamp(0)
  updated_at         DateTime?          @db.Timestamp(0)
  users              User?              @relation(fields: [user_id], references: [id], onUpdate: NoAction, map: "consultations_user_id_foreign")

  @@index([status], map: "consultations_status_index")
  @@index([user_id], map: "consultations_user_id_foreign")
  @@map("consultations")
}

model Sponsor {
  id                Int                     @id @default(autoincrement())
  user_id           Int?
  sponsor_type      sponsors_sponsor_type   @default(individual)
  name              String                  @db.VarChar(100)
  organization_name String?                 @db.VarChar(100)
  phone             String?                 @db.VarChar(20)
  email             String?
  address           String?                 @db.VarChar(255)
  postcode          String?                 @db.VarChar(10)
  sponsor_status    sponsors_sponsor_status @default(active)
  privacy_agree     Boolean                 @default(false)
  receipt_required  Boolean                 @default(false)
  created_at        DateTime?               @db.Timestamp(0)
  updated_at        DateTime?               @db.Timestamp(0)
  donations         Donation[]
  users             User?                   @relation(fields: [user_id], references: [id], onUpdate: NoAction, map: "sponsors_user_id_foreign")

  @@index([user_id], map: "sponsors_user_id_foreign")
  @@map("sponsors")
}

model Donation {
  id             Int                     @id @default(autoincrement())
  sponsor_id     Int
  donation_type  donations_donation_type
  amount         Decimal                 @db.Decimal(10, 0)
  payment_method String?                 @db.VarChar(50)
  payment_date   DateTime                @db.Date
  receipt_number String?                 @db.VarChar(50)
  purpose        String?                 @db.VarChar(255)
  memo           String?                 @db.Text
  created_at     DateTime?               @db.Timestamp(0)
  updated_at     DateTime?               @db.Timestamp(0)
  sponsors       Sponsor                 @relation(fields: [sponsor_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "donations_sponsor_id_foreign")

  @@index([payment_date], map: "donations_payment_date_index")
  @@index([sponsor_id], map: "donations_sponsor_id_foreign")
  @@map("donations")
}

model FinancialReport {
  id            Int       @id @default(autoincrement())
  report_year   Int       @db.Year
  report_month  Int?      @db.TinyInt
  title         String    @db.VarChar(255)
  content       String?   @db.LongText
  total_income  Decimal?  @db.Decimal(12, 0)
  total_expense Decimal?  @db.Decimal(12, 0)
  balance       Decimal?  @db.Decimal(12, 0)
  published_at  DateTime? @db.Date
  created_at    DateTime? @db.Timestamp(0)
  updated_at    DateTime? @db.Timestamp(0)

  @@unique([report_year, report_month], map: "financial_reports_year_month_unique")
  @@map("financial_reports")
}

model Faq {
  id         Int       @id @default(autoincrement())
  category   String    @db.VarChar(50)
  question   String    @db.VarChar(500)
  answer     String    @db.Text
  sort_order Int       @default(0)
  is_active  Boolean   @default(true)
  view_count Int       @default(0)
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)

  @@index([category], map: "faqs_category_index")
  @@index([sort_order], map: "faqs_sort_order_index")
  @@map("faqs")
}

model Popup {
  id         Int       @id @default(autoincrement())
  title      String    @db.VarChar(255)
  content    String    @db.Text
  image_path String?   @db.VarChar(500)
  link_url   String?   @db.VarChar(500)
  width      Int?      @default(400)
  height     Int?      @default(500)
  position_x Int?      @default(100)
  position_y Int?      @default(100)
  is_active  Boolean   @default(true)
  start_date DateTime  @db.DateTime(0)
  end_date   DateTime  @db.DateTime(0)
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)

  @@index([start_date, end_date], map: "popups_dates_index")
  @@index([is_active], map: "popups_is_active_index")
  @@map("popups")
}

model Menu {
  id          Int             @id @default(autoincrement())
  parent_id   Int?
  name        String          @db.VarChar(100)
  url         String?         @db.VarChar(500)
  menu_type   menus_menu_type @default(main)
  target      LinkTarget      @default(SELF)
  sort_order  Int             @default(0)
  is_active   Boolean         @default(true)
  created_at  DateTime?       @db.Timestamp(0)
  updated_at  DateTime?       @db.Timestamp(0)
  menus       Menu?           @relation("menusTomenus", fields: [parent_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "menus_parent_id_foreign")
  other_menus Menu[]          @relation("menusTomenus")

  @@index([menu_type], map: "menus_menu_type_index")
  @@index([parent_id], map: "menus_parent_id_foreign")
  @@map("menus")
}

model SiteSetting {
  id            Int                        @id @default(autoincrement())
  setting_group String                     @db.VarChar(50)
  setting_key   String                     @db.VarChar(100)
  setting_value String?                    @db.Text
  setting_type  site_settings_setting_type @default(text)
  created_at    DateTime?                  @db.Timestamp(0)
  updated_at    DateTime?                  @db.Timestamp(0)

  @@unique([setting_group, setting_key], map: "site_settings_group_key_unique")
  @@map("site_settings")
}

model ActivityLog {
  id          BigInt    @id @default(autoincrement())
  user_id     Int?
  log_type    String    @db.VarChar(50)
  description String    @db.Text
  ip_address  String?   @db.VarChar(45)
  user_agent  String?   @db.Text
  created_at  DateTime? @db.Timestamp(0)
  users       User?     @relation(fields: [user_id], references: [id], onUpdate: NoAction, map: "activity_logs_user_id_foreign")

  @@index([created_at], map: "activity_logs_created_at_index")
  @@index([log_type], map: "activity_logs_log_type_index")
  @@index([user_id], map: "activity_logs_user_id_foreign")
  @@map("activity_logs")
}

model SatisfactionSurvey {
  id          Int       @id @default(autoincrement())
  user_id     Int
  survey_type String    @db.VarChar(50)
  rating      Int       @db.TinyInt
  feedback    String?   @db.Text
  created_at  DateTime? @db.Timestamp(0)
  updated_at  DateTime? @db.Timestamp(0)
  users       User      @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "satisfaction_surveys_user_id_foreign")

  @@index([survey_type], map: "satisfaction_surveys_survey_type_index")
  @@index([user_id], map: "satisfaction_surveys_user_id_foreign")
  @@map("satisfaction_surveys")
}

model NewsletterSubscriber {
  id              Int       @id @default(autoincrement())
  email           String    @unique(map: "newsletter_subscribers_email_unique")
  name            String?   @db.VarChar(100)
  is_active       Boolean   @default(true)
  subscribed_at   DateTime  @default(now()) @db.Timestamp(0)
  unsubscribed_at DateTime? @db.Timestamp(0)
  created_at      DateTime? @db.Timestamp(0)
  updated_at      DateTime? @db.Timestamp(0)

  @@map("newsletter_subscribers")
}

model ApiKey {
  id           Int         @id @default(autoincrement())
  service_name String      @db.VarChar(50)
  api_key      String      @db.VarChar(255)
  api_secret   String?     @db.VarChar(255)
  environment  Environment @default(development)
  is_active    Boolean     @default(true)
  expires_at   DateTime?   @db.Timestamp(0)
  created_at   DateTime?   @db.Timestamp(0)
  updated_at   DateTime?   @db.Timestamp(0)

  @@unique([service_name, environment], map: "api_keys_service_env_unique")
  @@map("api_keys")
}

model RefreshToken {
  id             Int       @id @default(autoincrement())
  user_id        Int
  token_hash     String    @unique(map: "refresh_tokens_token_hash_unique") @db.VarChar(255)
  device_info    String?   @db.VarChar(255)
  ip_address     String?   @db.VarChar(45)
  expires_at     DateTime  @db.Timestamp(0)
  revoked_at     DateTime? @db.Timestamp(0)
  revoked_reason String?   @db.VarChar(255)
  created_at     DateTime? @db.Timestamp(0)
  updated_at     DateTime? @db.Timestamp(0)
  users          User      @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "refresh_tokens_user_id_foreign")

  @@index([expires_at], map: "refresh_tokens_expires_at_index")
  @@index([revoked_at], map: "refresh_tokens_revoked_at_index")
  @@index([user_id], map: "refresh_tokens_user_id_foreign")
  @@map("refresh_tokens")
}

model JwtBlacklist {
  id             Int                      @id @default(autoincrement())
  jti            String                   @unique(map: "jwt_blacklist_jti_unique") @db.VarChar(255)
  token_type     jwt_blacklist_token_type
  user_id        Int?
  expires_at     DateTime                 @db.Timestamp(0)
  blacklisted_at DateTime                 @default(now()) @db.Timestamp(0)
  reason         String?                  @db.VarChar(255)

  @@index([expires_at], map: "jwt_blacklist_expires_at_index")
  @@index([user_id], map: "jwt_blacklist_user_id_index")
  @@map("jwt_blacklist")
}

model UserDevice {
  id             Int                      @id @default(autoincrement())
  user_id        Int
  device_id      String                   @unique(map: "user_devices_device_id_unique") @db.VarChar(255)
  device_name    String?                  @db.VarChar(255)
  device_type    user_devices_device_type @default(web)
  platform       String?                  @db.VarChar(50)
  browser        String?                  @db.VarChar(50)
  ip_address     String?                  @db.VarChar(45)
  last_active_at DateTime?                @db.Timestamp(0)
  is_trusted     Boolean                  @default(false)
  created_at     DateTime?                @db.Timestamp(0)
  updated_at     DateTime?                @db.Timestamp(0)
  users          User                     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "user_devices_user_id_foreign")

  @@index([user_id], map: "user_devices_user_id_foreign")
  @@map("user_devices")
}

model SocialAccount {
  id               Int       @id @default(autoincrement())
  user_id          Int
  provider         Provider
  provider_user_id String    @db.VarChar(255)
  provider_email   String?
  provider_name    String?   @db.VarChar(100)
  provider_avatar  String?   @db.VarChar(500)
  access_token     String?   @db.Text
  refresh_token    String?   @db.Text
  token_expires_at DateTime? @db.Timestamp(0)
  raw_data         Json?
  created_at       DateTime? @db.Timestamp(0)
  updated_at       DateTime? @db.Timestamp(0)
  users            User      @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "social_accounts_user_id_foreign")

  @@unique([provider, provider_user_id], map: "social_accounts_provider_user_unique")
  @@index([user_id], map: "social_accounts_user_id_foreign")
  @@map("social_accounts")
}

model SocialLoginConfig {
  id                Int         @id @default(autoincrement())
  provider          Provider
  client_id         String      @db.VarChar(255)
  client_secret     String      @db.VarChar(255)
  redirect_uri      String      @db.VarChar(500)
  scope             String?     @db.Text
  additional_params Json?
  is_active         Boolean     @default(true)
  environment       Environment @default(development)
  created_at        DateTime?   @db.Timestamp(0)
  updated_at        DateTime?   @db.Timestamp(0)

  @@unique([provider, environment], map: "social_login_configs_provider_env_unique")
  @@map("social_login_configs")
}

model LoginAttempt {
  id             BigInt                        @id @default(autoincrement())
  email          String?
  ip_address     String                        @db.VarChar(45)
  user_agent     String?                       @db.Text
  login_type     login_attempts_login_type
  attempt_status login_attempts_attempt_status
  failure_reason String?                       @db.VarChar(255)
  attempted_at   DateTime                      @default(now()) @db.Timestamp(0)

  @@index([attempted_at], map: "login_attempts_attempted_at_index")
  @@index([email], map: "login_attempts_email_index")
  @@index([ip_address], map: "login_attempts_ip_index")
  @@map("login_attempts")
}

model ImageOptimization {
  id             Int       @id @default(autoincrement())
  original_path  String    @db.VarChar(500)
  optimized_path String    @db.VarChar(500)
  width          Int?
  height         Int?
  format         String?   @db.VarChar(10)
  quality        Int?      @db.TinyInt
  size_bytes     BigInt?
  created_at     DateTime? @db.Timestamp(0)

  @@index([width, height], map: "image_optimizations_dimensions_index")
  @@index([original_path], map: "image_optimizations_original_path_index")
  @@map("image_optimizations")
}

model PageMetadata {
  id             Int       @id @default(autoincrement())
  page_type      String    @db.VarChar(50)
  page_id        Int?
  title          String?   @db.VarChar(255)
  description    String?   @db.Text
  keywords       String?   @db.Text
  og_title       String?   @db.VarChar(255)
  og_description String?   @db.Text
  og_image       String?   @db.VarChar(500)
  twitter_card   String?   @default("summary_large_image") @db.VarChar(50)
  canonical_url  String?   @db.VarChar(500)
  robots         String?   @default("index,follow") @db.VarChar(100)
  created_at     DateTime? @db.Timestamp(0)
  updated_at     DateTime? @db.Timestamp(0)

  @@unique([page_type, page_id], map: "page_metadata_type_id_unique")
  @@map("page_metadata")
}

model CacheEntry {
  id          Int       @id @default(autoincrement())
  cache_key   String    @unique(map: "cache_entries_key_unique") @db.VarChar(255)
  cache_value String?   @db.LongText
  tags        Json?
  expires_at  DateTime? @db.Timestamp(0)
  created_at  DateTime? @db.Timestamp(0)
  updated_at  DateTime? @db.Timestamp(0)

  @@index([expires_at], map: "cache_entries_expires_at_index")
  @@map("cache_entries")
}

model Redirect {
  id               Int       @id @default(autoincrement())
  source_path      String    @unique(map: "redirects_source_path_unique") @db.VarChar(500)
  destination_path String    @db.VarChar(500)
  status_code      Int       @default(301)
  is_active        Boolean   @default(true)
  hit_count        Int       @default(0)
  created_at       DateTime? @db.Timestamp(0)
  updated_at       DateTime? @db.Timestamp(0)

  @@index([is_active], map: "redirects_is_active_index")
  @@map("redirects")
}

model FormSubmission {
  id         Int       @id @default(autoincrement())
  form_type  String    @db.VarChar(50)
  form_data  Json
  user_id    Int?
  ip_address String?   @db.VarChar(45)
  user_agent String?   @db.Text
  referer    String?   @db.VarChar(500)
  created_at DateTime? @db.Timestamp(0)
  users      User?     @relation(fields: [user_id], references: [id], onUpdate: NoAction, map: "form_submissions_user_id_foreign")

  @@index([created_at], map: "form_submissions_created_at_index")
  @@index([form_type], map: "form_submissions_form_type_index")
  @@index([user_id], map: "form_submissions_user_id_foreign")
  @@map("form_submissions")
}

model TwoFactorAuth {
  id             Int       @id @default(autoincrement())
  user_id        Int       @unique(map: "two_factor_auth_user_id_unique")
  secret         String    @db.VarChar(255)
  recovery_codes Json?
  enabled_at     DateTime? @db.Timestamp(0)
  last_used_at   DateTime? @db.Timestamp(0)
  created_at     DateTime? @db.Timestamp(0)
  updated_at     DateTime? @db.Timestamp(0)
  users          User      @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "two_factor_auth_user_id_foreign")

  @@map("two_factor_auth")
}

model VerificationCode {
  id          Int              @id @default(autoincrement())
  identifier  String           @db.VarChar(255)
  code        String           @db.VarChar(10)
  type        VerificationType
  expires_at  DateTime         @db.Timestamp(0)
  verified_at DateTime?        @db.Timestamp(0)
  attempts    Int              @default(0) @db.TinyInt
  created_at  DateTime?        @db.Timestamp(0)

  @@index([expires_at], map: "verification_codes_expires_at_index")
  @@index([identifier], map: "verification_codes_identifier_index")
  @@map("verification_codes")
}

enum UserStatus {
  active
  inactive
  suspended
}

enum Gender {
  M
  F
}

enum CategoryType {
  notice
  news
  publication
  media
  resource
  activity
}

enum PostStatus {
  draft
  published
  archived
}

enum LinkTarget {
  SELF  @map("_self")
  BLANK @map("_blank")
}

enum ConsultationStatus {
  pending
  assigned
  in_progress
  completed
  cancelled
}

enum Environment {
  development
  staging
  production
}

enum Provider {
  google
  naver
  kakao
  apple
}

enum VerificationType {
  email
  sms
  twofa @map("2fa")
}

enum donations_donation_type {
  regular
  one_time
}

enum jwt_blacklist_token_type {
  access
  refresh
}

enum sponsors_sponsor_type {
  individual
  organization
}

enum login_attempts_login_type {
  email
  google
  naver
  kakao
  apple
}

enum menus_menu_type {
  main
  footer
  utility
}

enum site_settings_setting_type {
  text
  textarea
  number
  boolean
  json
}

enum user_devices_device_type {
  web
  mobile
  tablet
  desktop
}

enum login_attempts_attempt_status {
  success
  failed
  blocked
}

enum main_banners_link_target {
  self  @map("_self")
  blank @map("_blank")
}

enum sponsors_sponsor_status {
  active
  inactive
  paused
}

enum users_login_type {
  email
  google
  naver
  kakao
  apple
}
